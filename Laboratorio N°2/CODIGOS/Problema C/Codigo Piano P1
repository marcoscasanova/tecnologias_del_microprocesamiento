#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <stdint.h>

/* ===== Frecuencias (Hz) ===== */
#define NOTE_C4 262
#define NOTE_D4 294
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_G4 392
#define NOTE_A4 440
#define NOTE_B4 494
#define NOTE_C5 523

/* ===== Inicialización de botones ===== */
void keys_init(void){
    // A0..A3 (PC0..PC3)
    DDRC  &= ~((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
    PORTC |=  ((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3)); // pull-up

    // D2..D5 (PD2..PD5)
    DDRD  &= ~((1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5));
    PORTD |=  ((1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5)); // pull-up
}

/* ===== Leer qué tecla está presionada ===== */
uint16_t read_note(void){
    if(!(PINC & (1<<PC0))) return NOTE_C4; // Do
    if(!(PINC & (1<<PC1))) return NOTE_D4; // Re
    if(!(PINC & (1<<PC2))) return NOTE_E4; // Mi
    if(!(PINC & (1<<PC3))) return NOTE_F4; // Fa
    if(!(PIND & (1<<PD2))) return NOTE_G4; // Sol
    if(!(PIND & (1<<PD3))) return NOTE_A4; // La
    if(!(PIND & (1<<PD4))) return NOTE_B4; // Si
    if(!(PIND & (1<<PD5))) return NOTE_C5; // Do5
    return 0;
}

/* ===== Buzzer simple con _delay_us() =====
   Genera señal cuadrada de periodo cuando = 1/f.
   El Buzzer es pasivo(simulación) salida → D9 (PB1)
*/
void buzzer_init(void){
    DDRB |= (1<<PB1); // PB1 salida
}

/* Reproduce una nota mientras esté presionada */
void play_tone(uint16_t freq){
    uint32_t period_us = 1000000UL / freq;      // periodo total en µs
    uint32_t half_period = period_us / 2;       // mitad de ciclo

    // mientras la nota siga presionada 
    while(read_note() == freq){
        PORTB |=  (1<<PB1);
        for(uint32_t i=0;i<half_period;i++) _delay_us(1);
        PORTB &= ~(1<<PB1);
        for(uint32_t i=0;i<half_period;i++) _delay_us(1);
    }
}

/* = MAIN = */
int main(void){
    keys_init();
    buzzer_init();

    while(1){
        uint16_t note = read_note();
        if(note){
            _delay_ms(8); // debounce básico
            if(note == read_note()){
                play_tone(note);
            }
        }
        else{
            PORTB &= ~(1<<PB1); // silencio si no hay ninunga nota presionada/ problema de pitido solucionado
        }
    }
}
