.include "m328pdef.inc"

;---------------- Constantes -----------------------------
.equ OCR2A_VAL  = 249          
.equ USE_PRESC_64 = 1          

;---------------- Registros ------------------------------
.def idx  = r16                ; índice LUT (0..255)
.def tmp  = r17                ; trabajo general
; r18 se usa como 'data' en la ISR

;---------------- Vectores --------------------------------
.cseg
.org 0x0000
    rjmp RESET

.org OC2Aaddr
    rjmp TIMER2_COMPA_ISR

;---------------- RESET / Init ----------------------------
RESET:
    ; Stack
    ldi  tmp, LOW(RAMEND)
    out  SPL, tmp
    ldi  tmp, HIGH(RAMEND)
    out  SPH, tmp

    ; r1 = 0 por convención
    clr  r1

    ; PORTD como salida (8 bits -> DAC)
    ldi  tmp, 0xFF
    out  DDRD, tmp

    ; [Opcional] poner inicialmente en 0 V
    ldi  tmp, 0x00
    out  PORTD, tmp

    ; Timer2: CTC (WGM21=1), prescaler segun selección
    ldi  tmp, (1<<WGM21)
    sts  TCCR2A, tmp

.if USE_PRESC_64
    ; Prescaler = 64  (CS22=1, CS21=0, CS20=0) -> Fs = 16MHz/(64*(OCR2A+1))
    ldi  tmp, (1<<CS22)
.else
    ; Prescaler = 8   (CS21=1) -> Fs = 16MHz/(8*(OCR2A+1))
    ldi  tmp, (1<<CS21)
.endif
    sts  TCCR2B, tmp

    ; TOP para CTC
    ldi  tmp, OCR2A_VAL
    sts  OCR2A, tmp

    ; Habilitar interrupción Compare Match A
    ldi  tmp, (1<<OCIE2A)
    sts  TIMSK2, tmp

    ; Estado inicial
    clr  idx
    sei

MAIN:
    rjmp MAIN

;---------------- ISR TIMER2 COMPA ------------------------
TIMER2_COMPA_ISR:
    push r18
    push ZH
    push ZL


    ldi  ZL, LOW(LUT*2)
    ldi  ZH, HIGH(LUT*2)
    add  ZL, idx
    brcc NoCarry
    inc  ZH
NoCarry:
    lpm  r18, Z            ; r18 = LUT[idx]

  

    out  PORTD, r18

    inc  idx               


    ; ======= MODO DEBUG RÁPIDO (alternativa) =======
    in   r18, PORTD        ; lee latch del puerto
    com  r18               ; invierte todo
    out  PORTD, r18
    ; ======= FIN DEBUG =======

    pop  ZL
    pop  ZH
    pop  r18
    reti

;---------------- LUT (256 muestras) ----------------------
; 128 veces 0x00 seguidas de 128 veces 0xFF (50% duty)
LUT:
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
    .db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF

;mmmmmm MANGO
