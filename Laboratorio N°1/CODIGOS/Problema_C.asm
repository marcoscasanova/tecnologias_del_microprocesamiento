; LABORATORIO_Problema_D.asm
; Created: 23/9/2025 16:24:54
; Author: Marcos Casanova, Luis Bouvier, Santiago Moizo

.include "m328pdef.inc"					;Incluye el archivo con las definiciones del ATmega328P

.cseg                                   ;Inicio del segmento de instrucciones
.org 0x0000                             ;Dirección de arranque
    rjmp INICIO                         ;Salto relativo a la etiqueta INICIO

.org OC2Aaddr                           ;Dirección de vector de interrupción OC2A (0x001C)
    rjmp INTERRUPCION                            ;Salto relativo a la rutina de servicio de interrupción

INICIO:
    sei                                 ;Habilita las interrupciones globales

    ldi r16, HIGH(RAMEND)               ;Carga la parte alta de la dirección final de la RAM en r16
    out SPH, r16                        ;Configura SPH (Stack Pointer High) con ese valor
    ldi r16, LOW(RAMEND)                ;Carga la parte baja de la dirección final de la RAM en r16
    out SPL, r16                        ;Configura SPL (Stack Pointer Low) con ese valor
    clr r1                              ;Limpia el registro r1 (convención: siempre en 0)

    ldi r16, 0xFF                       ;Carga 0xFF en r16
    out DDRD, r16                       ;Configura todos los pines del puerto D como salidas
    clr r16                             ;Limpia r16
    out PORTD, r16                      ;Inicializa el puerto D en bajo

    clr r18                             ;Inicializa el índice de la LUT (r18 = 0)

    ldi r16, (1<<WGM21)                 ;Configura el Timer2 en modo CTC
    sts TCCR2A, r16                     ;Guarda configuración en TCCR2A
    ldi r16, (1<<CS20)                  ;Selecciona prescaler = 1
    sts TCCR2B, r16                     ;Guarda configuración en TCCR2B

    ldi r16, 61                         ;Carga el valor 61 en r16 → OCR2A ≈ 1 kHz
    sts OCR2A, r16                      ;Configura OCR2A con ese valor

    ldi r16, (1<<OCIE2A)                ;Habilita la interrupción por Compare Match A
    sts TIMSK2, r16                     ;Guarda la configuración en TIMSK2

MAIN_LOOP:
    rjmp MAIN_LOOP                      ;Bucle principal infinito

INTERRUPCION:
    push r16                            ;Guarda r16 en la pila
    in   r16, SREG                      ;Copia el registro de estado SREG en r16
    push r16                            ;Guarda SREG en la pila

    ldi ZL, low(LUT<<1)                 ;Carga en ZL la parte baja de la dirección de la LUT
    ldi ZH, high(LUT<<1)                ;Carga en ZH la parte alta de la dirección de la LUT
    add ZL, r18                         ;Suma el índice (r18) a la parte baja de la dirección
    adc ZH, r1                          ;Suma el carry a la parte alta (r1 siempre = 0)

    lpm r20, Z                          ;Carga en r20 el valor de la LUT apuntado por Z
    out PORTD, r20                      ;Envía ese valor al puerto D (DAC R-2R)

    inc r18                             ;Incrementa el índice (recorre 0..255)

    pop r16                             ;Restaura SREG desde la pila
    out SREG, r16
    pop r16                             ;Restaura r16
    reti                                ;Retorna de la interrupción

.org 0x200                              ;Dirección base de la tabla de valores
LUT:
.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
.db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

.db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
.db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
.db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
.db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
.db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
.db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
.db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
.db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
;mmmmmm MANGO
